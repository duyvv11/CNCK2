const express = require("express");
const Order = require("../models/Order");
const authMiddleware = require("../middlewares/auth");
const { web3, contract, account } = require("../web3");
const router = express.Router();

console.log("üîπ Contract:", contract.options.address);
console.log("üîπ Web3 provider:", web3.currentProvider);
console.log("üîπ Account address:", account.address);

// üîπ C·ª≠a h√†ng t·∫°o ƒë∆°n h√†ng
router.post("/create", authMiddleware, async (req, res) => {
  console.log("üì© Email c·ªßa store t·ª´ token:", req.user.email);

  if (req.user.role !== "store") {
    return res.status(403).json({ error: "Only stores can create orders." });
  }

  const { itemNames, itemQuantities, recipientAddress, recipientPhone, customerEmail, storeEmail } = req.body;

  // Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
  if (!recipientAddress || !recipientPhone || !customerEmail || !storeEmail) {
    return res.status(400).json({ error: "Recipient address, phone, customer email, and store email are required." });
  }

  // Ki·ªÉm tra xem email c·ª≠a h√†ng trong request c√≥ kh·ªõp v·ªõi email t·ª´ token kh√¥ng
  if (storeEmail !== req.user.email) {
    return res.status(403).json({ error: "Invalid store email." });
  }

  try {
    // G·ª≠i giao d·ªãch t·∫°o ƒë∆°n h√†ng l√™n blockchain
    const tx = contract.methods.createOrder(itemNames, itemQuantities, recipientAddress, recipientPhone);
    const gas = await tx.estimateGas({ from: account.address });
    const receipt = await tx.send({ from: account.address, gas });

    const orderId = receipt.events.OrderCreated.returnValues.orderId.toString(); // ‚úÖ BigInt ‚Üí String

    // L∆∞u ƒë∆°n h√†ng v√†o MongoDB
    const order = new Order({
      orderId,
      store: storeEmail, // ‚úÖ L∆∞u email c·ªßa c·ª≠a h√†ng
      status: "Created",
      deliveryPerson: null,
      recipientAddress,
      recipientPhone,
      customerEmail, // ‚úÖ L∆∞u email kh√°ch h√†ng
      items: itemNames.map((name, i) => ({ name, quantity: itemQuantities[i] })),
    });

    await order.save();
    res.status(201).json({ message: "Order created successfully", orderId });
  } catch (error) {
    console.error("‚ùå Error creating order:", error);
    res.status(500).json({ error: "Internal server error" });
  }
});

// üîπ Shipper nh·∫≠n ƒë∆°n h√†ng
router.post("/pickup/:orderId", authMiddleware, async (req, res) => {
  if (req.user.role !== "shipper") {
    return res.status(403).json({ error: "Only shippers can pick up orders." });
  }

  const orderId = Number(req.params.orderId);
  const order = await Order.findOne({ orderId });
  console.log("üõ†Ô∏è orderId nh·∫≠n ƒë∆∞·ª£c t·ª´ frontend:", orderId); 

  if (!order) return res.status(404).json({ error: "Order not found." });
  if (order.status !== "Created") return res.status(400).json({ error: "Order cannot be picked up." });

  try {
    // ‚úÖ L·∫•y email c·ªßa Shipper t·ª´ session
    const shipperEmail = req.user.email;  

    // C·∫≠p nh·∫≠t tr√™n blockchain
    const tx = contract.methods.pickUpOrder(orderId);  
    const gas = await tx.estimateGas({ from: account.address });
    await tx.send({ from: account.address, gas });

    // C·∫≠p nh·∫≠t tr√™n database
    await Order.updateOne(
      { orderId },
      {
        $set: {
          status: "InTransit",
          deliveryPerson: shipperEmail,  // ‚úÖ L∆∞u email thay v√¨ username
        },
      }
    );

    res.json({ message: "Order picked up successfully.", deliveryPerson: shipperEmail });
  } catch (error) {
    console.error("‚ùå Error picking up order:", error);
    res.status(500).json({ error: "Internal server error" });
  }
});

// üîπ Shipper x√°c nh·∫≠n giao h√†ng
router.post("/confirm-delivery/:orderId", authMiddleware, async (req, res) => {
  if (req.user.role !== "shipper") {
    return res.status(403).json({ error: "Only shippers can confirm delivery." });
  }

  const { orderId } = req.params;
  const order = await Order.findOne({ orderId });

  if (!order) return res.status(404).json({ error: "Order not found." });
  console.log("üìå Current Order Status:", order.status);
  if (order.status !== "InTransit") return res.status(400).json({ error: "Order is not in transit." });

  try {
    const shipperEmail = req.user.email; // ‚úÖ L·∫•y email t·ª´ token ƒë·ªÉ ƒë·∫£m b·∫£o t√≠nh ch√≠nh x√°c
    console.log("üìå Token Shipper Email:", req.user.email);
    
    if (order.deliveryPerson !== shipperEmail) {
      return res.status(403).json({ error: "Only assigned delivery person can confirm delivery." });
    }

    const tx = contract.methods.confirmDelivery(orderId);
    const gas = await tx.estimateGas({ from: account.address });
    await tx.send({ from: account.address, gas });

    await Order.updateOne(
      { orderId },
      { $set: { status: "Delivered" } }
    );

    res.json({ message: "Order delivered successfully." });
  } catch (error) {
    console.error("‚ùå Error confirming delivery:", error);
    res.status(500).json({ error: "Internal server error" });
  }
});

// üîπ L·∫•y ƒë∆°n h√†ng theo email kh√°ch h√†ng
router.get("/customer/:email", authMiddleware, async (req, res) => {
  try {
    const { email } = req.params;
    console.log("üìå API nh·∫≠n request v·ªõi email:", email);

    const orders = await Order.find({ customerEmail: email });
    console.log("üìå ƒê∆°n h√†ng t√¨m th·∫•y:", orders);

    if (!orders.length) {
      return res.status(404).json({ message: "Kh√¥ng c√≥ ƒë∆°n h√†ng n√†o cho email n√†y." });
    }

    res.json(orders);
  } catch (error) {
    console.error("‚ùå L·ªói l·∫•y ƒë∆°n h√†ng theo email:", error);
    res.status(500).json({ error: "L·ªói server." });
  }
});

// üîπ L·∫•y danh s√°ch ƒë∆°n h√†ng
router.get("/", authMiddleware, async (req, res) => {
  try {
    const orders = await Order.find();
    res.json(orders);
  } catch (error) {
    console.error("‚ùå Error fetching orders:", error);
    res.status(500).json({ error: "Internal server error" });
  }
});


module.exports = router;
